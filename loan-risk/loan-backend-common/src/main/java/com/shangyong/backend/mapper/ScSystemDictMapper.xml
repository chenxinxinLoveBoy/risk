<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shangyong.backend.dao.ScSystemDictDao" >
  <resultMap id="BaseResultMap" type="com.shangyong.backend.entity.ScSystemDict" >
    <id column="dictionary_id" property="dictionaryId" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="value" property="value" jdbcType="VARCHAR" />
    <result column="parent" property="parent" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    dictionary_id, code, value, parent, state
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from sc_system_dict
    where dictionary_id = #{dictionaryId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from sc_system_dict
    where dictionary_id = #{dictionaryId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.shangyong.backend.entity.ScSystemDict" >
    insert into sc_system_dict (dictionary_id, code, value, 
      parent, state)
    values (#{dictionaryId,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{value,jdbcType=VARCHAR}, 
      #{parent,jdbcType=INTEGER}, #{state,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.shangyong.backend.entity.ScSystemDict" >
    insert into sc_system_dict
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="dictionaryId != null" >
        dictionary_id,
      </if>
      <if test="code != null" >
        code,
      </if>
      <if test="value != null" >
        value,
      </if>
      <if test="parent != null" >
        parent,
      </if>
      <if test="state != null" >
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="dictionaryId != null" >
        #{dictionaryId,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="value != null" >
        #{value,jdbcType=VARCHAR},
      </if>
      <if test="parent != null" >
        #{parent,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.shangyong.backend.entity.ScSystemDict" >
    update sc_system_dict
    <set >
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="value != null" >
        value = #{value,jdbcType=VARCHAR},
      </if>
      <if test="parent != null" >
        parent = #{parent,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where dictionary_id = #{dictionaryId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shangyong.backend.entity.ScSystemDict" >
    update sc_system_dict
    set code = #{code,jdbcType=VARCHAR},
      value = #{value,jdbcType=VARCHAR},
      parent = #{parent,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER}
    where dictionary_id = #{dictionaryId,jdbcType=INTEGER}
  </update>
  
  <select id="getListByCodes" parameterType="java.util.Map" resultType="java.util.Map">
  	select t3.pcode, t3.pvalue, GROUP_CONCAT(t3.code separator ',') codes,
	GROUP_CONCAT(t3.value separator ',') valuess  from (
	select p1.code pcode, p1.value pvalue, t2.* from sc_system_dict p1 
	inner join sc_system_dict t2 on p1.dictionary_id = t2.parent 
	<where>
		<if test="codesArr != null">
			p1.code in 
			<foreach collection="codesArr" item="code" open="(" close=")" separator=",">
				#{code}
			</foreach>
		</if>
		and (p1.parent is not null or p1.parent != 0)
	</where>
	) t3 group by t3.pcode
  </select>
  
  <select id="getByCodes" parameterType="java.util.Map" resultType="java.util.Map">
	select t3.pcode, t3.pvalue, GROUP_CONCAT(t3.code separator ',') codes,
	GROUP_CONCAT(t3.value separator ',') valuess  from (
		select db.dic_big_code pcode, db.dic_big_value pvalue, ds.dic_small_code code, ds.dic_small_value value
		from sc_dict_big db INNER JOIN sc_dict_small ds 
		on db.id = ds.dict_big_id
		<where>
			<if test="codesArr != null">
				db.dic_big_code in 
				<foreach collection="codesArr" item="code" open="(" close=")" separator=",">
					#{code}
				</foreach>
			</if>
		</where>
		
	) t3 group by t3.pcode
  </select>
  
</mapper>